// datasource uses sqlite for local dev; switch provider to mysql and set DATABASE_URL for MySQL
// provider can be changed to "mysql" without changing models

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MECHANIC
  STAFF
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  phone         String?   @unique
  role          UserRole  @default(STAFF)
  country       String? 

  accounts      Account[]
  sessions      Session[]
  chatMessages  ChatMessage[]
  otps          OtpCode[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brand {
  id        String   @id @default(cuid())
  name      String
  category  String   // "bikes" or "cars"
  country   String?
  models    VehicleModel[]
}

model VehicleModel {
  id       String  @id @default(cuid())
  name     String
  brandId  String
  brand    Brand   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  parts    Part[]
}

model Part {
  id          String  @id @default(cuid())
  sku         String  @unique
  name        String
  price       Float
  inStock     Boolean @default(true)
  country     String?
  modelId     String
  model       VehicleModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
  description String?
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      String   // "user" | "assistant"
  language  String   // e.g., "ta-IN", "en-US", "hi-IN", "ml-IN"
  content   String
  createdAt DateTime @default(now())
}

model OtpCode {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  target     String   // email or phone
  channel    String   // "email" | "sms"
  code       String
  expiresAt  DateTime
  purpose    String   // "login" | "forgot"
  consumed   Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([target, purpose, consumed])
}